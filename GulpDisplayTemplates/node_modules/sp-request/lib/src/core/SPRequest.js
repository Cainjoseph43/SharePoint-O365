"use strict";
var requestp = require('request-promise');
var Promise = require('bluebird');
var _ = require('lodash');
var util = require('util');
var AuthResolverFactory_1 = require('./auth/AuthResolverFactory');
var Cache_1 = require('./utils/Cache');
exports.requestDigestCache = new Cache_1.Cache();
function create(credentials, environment) {
    var resolversFactory = new AuthResolverFactory_1.AuthResolverFactory();
    var coreRequest = function (options) {
        return new Promise(function (resolve, reject) {
            options.resolveWithFullResponse = true;
            options.simple = true;
            options.headers = options.headers || {};
            _.defaults(options.headers, {
                'Accept': 'application/json;odata=verbose',
                'Content-Type': 'application/json;odata=verbose'
            });
            _.defaults(options, { json: true });
            var authOptions = {
                options: options,
                credentials: credentials,
                env: environment
            };
            resolversFactory
                .resolve(authOptions.options.url)
                .applyAuthHeaders(authOptions)
                .then(requestp)
                .then(function (response) {
                resolve(response);
            })
                .catch(reject);
        });
    };
    var spRequestFunc = function (options, coreOptions) {
        if (typeof options === 'string') {
            var url = options;
            var newOptions = void 0;
            if (coreOptions) {
                newOptions = coreOptions;
                newOptions.url = url;
            }
            else {
                newOptions = {
                    url: url
                };
            }
            if (!newOptions.method) {
                newOptions.method = 'GET';
            }
            return coreRequest(newOptions);
        }
        else {
            if (!options.method) {
                options.method = 'GET';
            }
            return coreRequest(options);
        }
    };
    spRequestFunc.requestDigest = function (siteUrl) {
        return new Promise(function (resolve, reject) {
            var url = siteUrl.replace(/\/$/, '');
            var cacheKey = util.format('%s@%s', url, credentials.username);
            var cachedDigest = exports.requestDigestCache.get(cacheKey);
            if (cachedDigest) {
                resolve(cachedDigest);
                return;
            }
            spRequestFunc.post(url + "/_api/contextinfo")
                .then(function (response) {
                var digest = response.body.d.GetContextWebInformation.FormDigestValue;
                var timeout = parseInt(response.body.d.GetContextWebInformation.FormDigestTimeoutSeconds, 10);
                exports.requestDigestCache.set(cacheKey, digest, timeout - 30);
                resolve(digest);
                return null;
            })
                .catch(reject);
        });
    };
    ['get', 'post'].forEach(function (method) {
        spRequestFunc[method] = function (options, coreOptions) {
            if (typeof options === 'string') {
                if (coreOptions) {
                    coreOptions.method = method.toUpperCase();
                }
                else {
                    coreOptions = {
                        method: method.toUpperCase()
                    };
                }
                return spRequestFunc(options, coreOptions);
            }
            if (typeof options !== 'string') {
                options.method = method.toUpperCase();
            }
            return spRequestFunc(options);
        };
    });
    return spRequestFunc;
}
exports.create = create;
