"use strict";
var Promise = require('bluebird');
var consts = require('constants');
var url = require('url');
var util = require('util');
var sp = require('node-spoauth');
var Cache_1 = require('./../utils/Cache');
var OnlineResolver = (function () {
    function OnlineResolver() {
    }
    OnlineResolver.prototype.applyAuthHeaders = function (authOptions) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var host = url.parse(authOptions.options.url).host;
            var cacheKey = util.format('%s@%s', host, authOptions.credentials.username);
            var cachedCookie = OnlineResolver._cookieCache.get(cacheKey);
            if (cachedCookie) {
                _this.setHeaders(authOptions.options, cachedCookie);
                resolve(authOptions.options);
                return;
            }
            var service = new sp.RestService(authOptions.options.url);
            var signin = Promise.promisify(service.signin, { context: service });
            signin(authOptions.credentials.username, authOptions.credentials.password)
                .then(function (auth) {
                var cookie = "FedAuth=" + auth.FedAuth + "; rtFa=" + auth.rtFa;
                OnlineResolver._cookieCache.set(cacheKey, cookie, 30 * 60);
                _this.setHeaders(authOptions.options, cookie);
                resolve(authOptions.options);
                return null;
            })
                .catch(reject);
        });
    };
    OnlineResolver.prototype.setHeaders = function (options, cookie) {
        options.headers = options.headers || {};
        options.headers['Cookie'] = cookie;
        options['secureOptions'] = consts.SSL_OP_NO_TLSv1_2;
    };
    OnlineResolver._cookieCache = new Cache_1.Cache();
    return OnlineResolver;
}());
exports.OnlineResolver = OnlineResolver;
