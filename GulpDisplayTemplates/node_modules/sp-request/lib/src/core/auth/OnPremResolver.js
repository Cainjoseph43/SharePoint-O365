"use strict";
var Promise = require('bluebird');
var _ = require('lodash');
var url = require('url');
var rp = require('request-promise');
var ntlm = require('httpntlm').ntlm;
var agent = require('agentkeepalive');
var OnPremResolver = (function () {
    function OnPremResolver() {
    }
    OnPremResolver.prototype.applyAuthHeaders = function (authOptions) {
        return new Promise(function (resolve, reject) {
            var environmentOptions = _.defaults(authOptions.env, { domain: '', workstation: '' });
            var ntlmOptions = _.assign(authOptions.credentials, environmentOptions);
            ntlmOptions.url = authOptions.options.url;
            var type1msg = ntlm.createType1Message(ntlmOptions);
            var isHttps = url.parse(authOptions.options.url).protocol === 'https:';
            var keepaliveAgent = isHttps ? new agent.HttpsAgent() : new agent();
            rp({
                url: authOptions.options.url,
                method: 'GET',
                headers: {
                    'Connection': 'keep-alive',
                    'Authorization': type1msg,
                    'Accept': 'application/json;odata=verbose'
                },
                agent: keepaliveAgent,
                resolveWithFullResponse: true,
                simple: false,
                rejectUnauthorized: false
            })
                .then(function (response) {
                var type2msg = ntlm.parseType2Message(response.headers['www-authenticate']);
                var type3msg = ntlm.createType3Message(type2msg, ntlmOptions);
                authOptions.options.headers = authOptions.options.headers || {};
                authOptions.options.headers['Connection'] = 'Close';
                authOptions.options.headers['Authorization'] = type3msg;
                authOptions.options.rejectUnauthorized = false;
                authOptions.options.strictSSL = false;
                authOptions.options.agent = keepaliveAgent;
                resolve(authOptions.options);
                return null;
            })
                .catch(reject);
        });
    };
    return OnPremResolver;
}());
exports.OnPremResolver = OnPremResolver;
